import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { HttpClient } from '@angular/common/http';
import { jwtDecode } from 'jwt-decode';

@Component({
  selector: 'app-notifications',
  standalone: true,
  imports: [CommonModule],
  templateUrl: './notifications.component.html',
  styleUrls: ['./notifications.component.scss']
})
export class NotificationsComponent implements OnInit {
  notifications: any[] = [];
  loading = true;
  userRole: string = '';

  constructor(private http: HttpClient) {}

  ngOnInit(): void {
    console.log('üéì Student Notifications Component ngOnInit');

    // L·∫•y role t·ª´ token ƒë·ªÉ debug
    const token = localStorage.getItem('token');
    if (token) {
      try {
        const decoded: any = jwtDecode(token);
        this.userRole = decoded?.["http://schemas.microsoft.com/ws/2008/06/identity/claims/role"] || 'Unknown';
        console.log('üéì User role from token:', this.userRole);
      } catch (err) {
        console.error('‚ùå Error decoding token:', err);
      }
    }

    this.http.get<any>('/api/notifications?Page=1&PageSize=20').subscribe({
      next: response => {
        console.log('üìã Raw API response:', response);
        
        // Ki·ªÉm tra c·∫•u tr√∫c response - c√≥ th·ªÉ l√† { data: [...] } ho·∫∑c tr·ª±c ti·∫øp array
        const allNotifications = response.data || response || [];
        console.log('üìã All notifications count:', allNotifications.length);
        console.log('üìã All notifications:', allNotifications);
        
        // Ch·ªâ l·∫•y th√¥ng b√°o d√†nh cho Student ho·∫∑c All (case insensitive)
        this.notifications = allNotifications.filter((n: any) => {
          const target = n.targetRole?.toLowerCase();
          const isForStudent = target === 'student' || target === 'all';
          console.log(`üìã Notification "${n.title}" - Target: "${n.targetRole}" (${target}) - For Student: ${isForStudent}`);
          return isForStudent;
        });
        
        console.log('üìã Filtered notifications for student:', this.notifications.length);
        this.loading = false;
      },
      error: err => {
        console.error('‚ùå L·ªói khi t·∫£i th√¥ng b√°o:', err);
        console.error('‚ùå Error details:', err.error);
        console.error('‚ùå Status:', err.status);
        console.error('‚ùå URL:', err.url);
        this.loading = false;
      }
    });
  }
}
