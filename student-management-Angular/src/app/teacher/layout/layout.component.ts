import { Component, OnInit } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { RouterModule, RouterOutlet } from '@angular/router';
import { jwtDecode } from 'jwt-decode';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-layout',
  standalone: true,
  imports: [RouterOutlet, RouterModule, CommonModule],
  templateUrl: './layout.component.html',
  styleUrls: ['./layout.component.scss']
})
export class LayoutComponent implements OnInit {
  fullName: string = '...';
  notifications: any[] = [];

  constructor(private http: HttpClient) {}

  ngOnInit(): void {
    console.log('üöÄ LayoutComponent ngOnInit ch·∫°y');

    const token = localStorage.getItem('token'); 

    if (!token) {
      console.warn('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y Token');
      this.fullName = 'Gi·∫£ng vi√™n';
      return;
    }

    try {
      const decoded: any = jwtDecode(token);
      const userId = decoded?.nameid || decoded?.sub;
      let role = decoded?.["http://schemas.microsoft.com/ws/2008/06/identity/claims/role"] || 'Teacher';
      console.log('üßæ Decoded token:', decoded);
      
      // Chu·∫©n h√≥a role ch·ªØ hoa ƒë·∫ßu
      role = role.charAt(0).toUpperCase() + role.slice(1).toLowerCase();
      console.log('üéØ Vai tr√≤ hi·ªán t·∫°i:', role);

      if (!userId) {
        console.error('‚ùå Kh√¥ng c√≥ userId trong token');
        this.fullName = 'Gi·∫£ng vi√™n';
        return;
      }

      // G·ªçi API l·∫•y t√™n gi·∫£ng vi√™n
      this.http.get<any>(`/api/teachers/me`).subscribe({
        next: (data) => {
          this.fullName = data.fullName;
          console.log('üë§ T√™n gi·∫£ng vi√™n:', this.fullName);
        },
        error: (err) => {
          console.error('‚ùå Kh√¥ng th·ªÉ l·∫•y t√™n gi·∫£ng vi√™n:', err);
          this.fullName = 'Gi·∫£ng vi√™n';
        }
      });

      // G·ªçi API l·∫•y danh s√°ch th√¥ng b√°o
      this.http.get<any[]>('/api/notifications').subscribe({
        next: (data) => {
          console.log('üìú T·∫•t c·∫£ th√¥ng b√°o:', data);

          this.notifications = data.filter(n => {
            const target = n.targetRole?.toLowerCase();
            const matched = target === 'all' || target === role.toLowerCase();
            console.log(`üîç "${n.title}" | targetRole: ${n.targetRole} | matched: ${matched}`);
            return matched;
          });

          console.log('üì¨ Th√¥ng b√°o sau l·ªçc:', this.notifications);
        },
        error: (err) => {
          console.error('‚ùå Kh√¥ng th·ªÉ l·∫•y th√¥ng b√°o:', err);
        }
      });

    } catch (err) {
      console.error('‚ùå L·ªói gi·∫£i m√£ token:', err);
      this.fullName = 'Gi·∫£ng vi√™n';
    }
  }

  logout() {
    localStorage.clear();
    window.location.href = '/login';
  }
}
